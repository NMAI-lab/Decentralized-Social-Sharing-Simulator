;Peer similarity has an advantage when peers possess few tastes

to L3
  let t-list n-values 20 [?]
  let t-count 1
  let m 5
  let k 5
  
  setup
  
  create-profiles1 40 [profiles-setup self m k t-count t-list set color red]
  create-profiles2 40 [profiles-setup self m k t-count t-list set color cyan]
  create-profiles3 40 [profiles-setup self m k t-count t-list set color green]
  create-documents 200 [documents-setup self k t-count t-list set color grey]
  
  my-layout
  
  repeat 300 [go]
end

to S1
  let t-list n-values 20 [?]
  let t-count 10
  let m 5
  let k 5
  
  setup
  
  create-profiles1 40 [profiles-setup self m k t-count t-list set color red]
  create-profiles2 40 [profiles-setup self m k t-count t-list set color cyan]
  create-profiles3 40 [profiles-setup self m k t-count t-list set color green]
  create-documents 200 [documents-setup self k t-count t-list set color grey]
  
  my-layout
  
  repeat 300 [go]
end

to S2
  let t-list n-values 2 [?]
  let t-count 1
  let m 5
  let k 5
  
  setup
  
  create-profiles1 40 [profiles-setup self m k t-count t-list set color red]
  create-profiles2 40 [profiles-setup self m k t-count t-list set color cyan]
  create-profiles3 40 [profiles-setup self m k t-count t-list set color green]
  create-documents 200 [documents-setup self k t-count t-list set color grey]
  
  my-layout
  
  repeat 300 [go]
end

to S3
  let t-list n-values 2 [?]
  let t-count 1
  let m 5
  let k 5
  
  setup
  
  create-profiles1 40 [profiles-setup self m k t-count t-list set color red]
  create-profiles2 40 [profiles-setup self m k t-count t-list set color cyan]
  create-profiles3 40 [profiles-setup self m k t-count t-list set color green]
  create-documents 100 [documents-setup self k t-count t-list set color grey]
  
  my-layout
  
  repeat 300 [go]
end

;The fewer docs, the worse the similarity peers do, why?
;it seems that increasing m offsets the poor performance, why?
to S4
  let t-list n-values 2 [?]
  let t-count 1
  let m 5
  let k 5
  
  setup
  
  create-profiles1 40 [profiles-setup self m k t-count t-list set color red]
  create-profiles2 40 [profiles-setup self m k t-count t-list set color cyan]
  create-profiles3 40 [profiles-setup self m k t-count t-list set color green]
  create-documents 40 [documents-setup self k t-count t-list set color grey]
  
  my-layout
  
  repeat 300 [go]
end

;Even though they will instantly like all docs that like the same docs... they are still behind 
to S5
  let t-list n-values 2 [?]
  let t-count 1
  let m 1000
  let k 5
  
  setup
  
  create-profiles1 40 [profiles-setup self m k t-count t-list set color red]
  create-profiles2 40 [profiles-setup self m k t-count t-list set color cyan]
  create-profiles3 40 [profiles-setup self m k t-count t-list set color green]
  create-documents 20 [documents-setup self k t-count t-list set color grey]
  
  my-layout
  
  repeat 300 [go]
end

;Decreasing the peer network size
;similarity peers dont reach their peak as quickly as memory-random ones
to S6
  let t-list n-values 2 [?]
  let t-count 1
  let m 1000
  let k 5
  
  setup
  
  create-profiles1 10 [profiles-setup self m k t-count t-list set color red]
  create-profiles2 10 [profiles-setup self m k t-count t-list set color cyan]
  create-profiles3 10 [profiles-setup self m k t-count t-list set color green]
  create-documents 20 [documents-setup self k t-count t-list set color grey]
  
  my-layout
  
  repeat 300 [go]
end

;Fixed the slow finish of peer similarity, it was that they weren't properly eliminating results that were in the topk-memory
to S7
  let t-list n-values 2 [?]
  let t-count 1
  let m 1000
  let k 5
  
  setup
  create-profiles2 10 [profiles-setup self m k t-count t-list set color cyan]
  create-profiles3 10 [profiles-setup self m k t-count t-list set color green]
  create-documents 20 [documents-setup self k t-count t-list set color grey]
  
  my-layout
  
  repeat 300 [go]
end