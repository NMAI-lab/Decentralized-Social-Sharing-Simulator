;PROFILE 1 uses random top-k
;PROFILE 2 uses popular top-k


;All profiles use the following strategies:
;    LIKE:  like-tag
;    SCORE: score-new

breed [profiles1 profile1]
breed [profiles2 profile2]

;topk-memory stores documents that have appeared in topk before
profiles1-own [max-k topk-memory]
profiles2-own [max-k topk-memory]

to profiles-setup [active-turtle k tag-count tag-list]
  turtles-layout ;Standard layout
  set score 0
  set turns 0
  set max-k k
  set document? false
  set active? true
  set tags n-of tag-count tag-list
  set topk-memory []
end

to profiles1-go [active-turtle]
  ask active-turtle [
    let topk topk-rememberRandom active-turtle ([max-k] of active-turtle) topk-memory
    foreach topk [if not member? ? topk-memory [set topk-memory lput ? topk-memory]]
    let like-list (like-tag active-turtle topk)
    set score score + score-new active-turtle topk like-list
    create-links-with turtle-set like-list
  ]
end

to profiles2-go [active-turtle]
  ask active-turtle [
    let topk topk-rememberpopularity active-turtle ([max-k] of active-turtle) topk-memory
    foreach topk [if not member? ? topk-memory [set topk-memory lput ? topk-memory]]
    let like-list (like-tag active-turtle topk)
    set score score + score-new active-turtle topk like-list
    create-links-with turtle-set like-list
  ]
end

