
to-report topk-popularity [active-turtle k]
  ;; Sort documents by how many links they have
  let topk reverse sort-on [count link-neighbors] turtles with [document?]
  
  if (length topk > k) [set topk sublist topk 0 k]
  report topk
end


to-report topk-random [active-turtle k]
  let topk [self] of turtles with [document?]
  
  if (length topk > k) [set topk sublist topk 0 k]
  report topk
end


to-report topk-newPopularity [active-turtle k]
  let topk reverse sort-on [count link-neighbors] turtles with [document?]
  foreach topk [if (member? ? link-neighbors) [set topk remove ? topk]]
  
  if (length topk > k) [set topk sublist topk 0 k]
  report topk
end


to-report topk-newRandom [active-turtle k]
  let topk [self] of turtles with [document?]
  foreach topk [if (member? ? link-neighbors) [set topk remove ? topk]]
  
  if (length topk > k) [set topk sublist topk 0 k]
  report topk
end


to-report topk-rememberPopularity [active-turtle k memory-list]
  let topk reverse sort-on [count link-neighbors] turtles with [document?]
  show link-neighbors
  foreach topk [if (member? ? link-neighbors or member? ? memory-list) [set topk remove ? topk]]
  
  if (length topk > k) [set topk sublist topk 0 k]
  report topk
end

to-report topk-rememberRandom [active-turtle k memory-list]
  let topk [self] of turtles with [document?]
  foreach topk [if (member? ? link-neighbors or member? ? memory-list) [set topk remove ? topk]]
  
  if (length topk > k) [set topk sublist topk 0 k]
  report topk
end